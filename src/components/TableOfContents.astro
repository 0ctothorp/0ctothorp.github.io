---
import { type MarkdownHeading } from 'astro';

export interface Props {
    headings: MarkdownHeading[];
    class?: string;
}

const { headings, class: className } = Astro.props;

interface Heading extends MarkdownHeading { subheadings?: Array<Heading> };

const headingsArr = headings as Array<Heading>;
  
headingsArr.forEach(heading => { heading.subheadings = []; });

const toc: Heading[] = [headingsArr[0]!]

for(let i = 1; i < headingsArr.length; i++) {
  const heading = headingsArr[i]!;
  let parent = toc.at(-1)!;
  while(heading.depth - 1> parent.depth) {
    parent = parent.subheadings!.at(-1)!;
  }
  parent.subheadings!.push(heading);
}
---

<ul class={className}>
  {
    toc[0]!.subheadings!.map((heading) => {
      return (
        <>
            <li><a href={`#${heading.slug}`}>{heading.text}</a></li>
            {heading.subheadings?.length! > 0 && <Astro.self headings={heading.subheadings!} />}
        </>
      );
    })
  }
</ul>